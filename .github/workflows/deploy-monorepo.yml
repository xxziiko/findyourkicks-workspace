# ------------------------------------------------------------
# 🧾 Monorepo 앱 변경 시 Vercel 자동 배포
# 이 워크플로우는 main 브랜치에 코드가 push 되었을 때 실행됩니다.
# `apps/shop` 또는 `apps/admin` 디렉토리 혹은 공통 패키지(`packages/shared`)에 변경사항이 감지되면,
# 해당 앱만 선택적으로 빌드하고 Vercel에 배포합니다.
#
# dorny/paths-filter 액션을 사용해 변경된 경로를 감지하고,
# pnpm + Turborepo를 통해 의존성 설치 및 앱 빌드를 수행합니다.
# ------------------------------------------------------------


  name: Deploy Monorepo Apps
  
  on:
    push:
  
  jobs:
    deploy-shop:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
    
        - name: 🟣 Setup pnpm
          uses: pnpm/action-setup@v2
          with:
            version: 10  
    
        - name: 🔵 Setup Node
          uses: actions/setup-node@v4
          with:
            node-version: 20
            cache: 'pnpm'
    
        - name: 📦 Install dependencies
          run: pnpm install
    
        - name: 📥 Install Vercel CLI
          run: pnpm install -g vercel
      
        - name: pull vercel production output
          run: vercel pull --yes  --cwd=apps/shop --environment=production --token=${{ secrets.VERCEL_TOKEN }}
            
        - name: 🏗️ Build shop app to Vercel
          env:
            NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
            SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} 
          run: vercel build --cwd apps/shop --token=${{ secrets.VERCEL_TOKEN }}
    
        - name: 🚀 Deploy shop to Vercel
          run: vercel deploy --cwd apps/shop --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
            
    deploy-admin:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
    
        - name: �� Setup pnpm
          uses: pnpm/action-setup@v2
          with:
            version: 10
    
        - name: 🔵 Setup Node
          uses: actions/setup-node@v4
          with:
            node-version: 20
            cache: 'pnpm'
    
        - name: 📦 Install dependencies
          run: pnpm install
    
        - name: 📥 Install Vercel CLI
          run: pnpm install -g vercel
    
        - name: pull vercel production output
          run: vercel pull --yes --cwd=apps/admin --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          
        - name: 🏗️ Build admin app to Vercel
          run: vercel build --cwd apps/admin --token=${{ secrets.VERCEL_TOKEN }}
    
        - name: 🚀 Deploy admin to Vercel
          run: vercel deploy --cwd apps/admin --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
  