name: Unified CI/CD Pipeline

on:
  push:
    branches: [main, migrate-to-docker]  # migrate-to-docker 브랜치 추가
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKERHUB_ADMIN: ${{ secrets.DOCKERHUB_ADMIN }}
  DOCKERHUB_SHOP: ${{ secrets.DOCKERHUB_SHOP }}
  DOCKERHUB_NGINX: ${{ secrets.DOCKERHUB_NGINX }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  # 환경변수들 추가
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  API_URL: ${{ secrets.API_URL }}
  SHOP_API_URL: ${{ secrets.SHOP_API_URL }}
  SHOP_BASE_URL: ${{ secrets.SHOP_BASE_URL }}
  TOSS_CLIENT_KEY: ${{ secrets.TOSS_CLIENT_KEY }}
  TOSS_SECRET_KEY: ${{ secrets.TOSS_SECRET_KEY }}
  TEST_ACCOUNT_PW: ${{ secrets.TEST_ACCOUNT_PW }}

jobs:
  # 변경사항 감지
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      shop_changed: ${{ steps.filter.outputs.shop }}
      admin_changed: ${{ steps.filter.outputs.admin }}
      nginx_changed: ${{ steps.filter.outputs.nginx }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shop:
              - 'apps/shop/**'
            admin:
              - 'apps/admin/**'
            nginx:
              - 'nginx/**'
              - 'docker-compose.prod.yml'
              - '.github/workflows/unified-deploy.yml'

  # Admin 앱 빌드
  build-admin:
    needs: detect-changes
    if: needs.detect-changes.outputs.admin_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for Admin
        run: |
          echo "VITE_SUPABASE_URL=${{ env.SUPABASE_URL }}" >> apps/admin/.env
          echo "VITE_SUPABASE_ANON_KEY=${{ env.SUPABASE_ANON_KEY }}" >> apps/admin/.env
          echo "VITE_API_URL=${{ env.API_URL }}" >> apps/admin/.env
        working-directory: ${{ github.workspace }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Admin image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/admin
          file: ./apps/admin/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKERHUB_ADMIN }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Shop 앱 빌드
  build-shop:
    needs: detect-changes
    if: needs.detect-changes.outputs.shop_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for Shop
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ env.SUPABASE_URL }}" >> apps/shop/.env
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ env.SUPABASE_ANON_KEY }}" >> apps/shop/.env
          echo "NEXT_PUBLIC_API_URL=${{ env.SHOP_API_URL }}" >> apps/shop/.env
          echo "NEXT_PUBLIC_SHOP_BASE_URL=${{ env.SHOP_BASE_URL }}" >> apps/shop/.env
          echo "NEXT_PUBLIC_TOSS_CLIENT_KEY=${{ env.TOSS_CLIENT_KEY }}" >> apps/shop/.env
          echo "TOSS_SECRET_KEY=${{ env.TOSS_SECRET_KEY }}" >> apps/shop/.env
          echo "TEST_ACCOUNT_PW=${{ env.TEST_ACCOUNT_PW }}" >> apps/shop/.env
        working-directory: ${{ github.workspace }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Shop image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/shop
          file: ./apps/shop/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKERHUB_SHOP }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Nginx 빌드
  build-nginx:
    needs: detect-changes
    if: needs.detect-changes.outputs.nginx_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          platform: linux/amd64
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKERHUB_NGINX }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 통합 배포
  deploy:
    needs: [detect-changes, build-admin, build-shop, build-nginx]
    if: always() && !cancelled() && !failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            # 환경변수 설정
            export DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
            export DOCKERHUB_ADMIN=${{ env.DOCKERHUB_ADMIN }}
            export DOCKERHUB_SHOP=${{ env.DOCKERHUB_SHOP }}
            export DOCKERHUB_NGINX=${{ env.DOCKERHUB_NGINX }}

            # 기존 서비스 중지
            echo "🛑 기존 서비스 중지..."
            sudo systemctl stop nginx || true
            sudo systemctl disable nginx || true
            docker stop findyourkicks-admin findyourkicks-shop findyourkicks-nginx || true
            docker rm findyourkicks-admin findyourkicks-shop findyourkicks-nginx || true

            # Docker Compose 파일 생성
            echo "📋 Docker Compose 설정..."
            cat > docker-compose.yml << 'EOF'
            services:
              nginx:
                image: ${DOCKER_USERNAME}/${DOCKERHUB_NGINX}:latest
                container_name: findyourkicks-nginx
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - /etc/letsencrypt:/etc/letsencrypt:ro
                  - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
                  - nginx_logs:/var/log/nginx
                depends_on:
                  - admin
                  - shop
                networks:
                  - findyourkicks-network
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost/ping"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s

              admin:
                image: ${DOCKER_USERNAME}/${DOCKERHUB_ADMIN}:latest
                container_name: findyourkicks-admin
                environment:
                  - NODE_ENV=production
                networks:
                  - findyourkicks-network
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              shop:
                image: ${DOCKER_USERNAME}/${DOCKERHUB_SHOP}:latest
                container_name: findyourkicks-shop
                environment:
                  - NODE_ENV=production
                networks:
                  - findyourkicks-network
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

            networks:
              findyourkicks-network:
                driver: bridge

            volumes:
              nginx_logs:
                driver: local
            EOF

            # 최신 이미지 풀 및 배포
            echo "🚀 새로운 Docker 스택 시작..."
            docker compose pull
            docker compose up -d

            # 배포 확인
            echo "✅ 배포 상태 확인..."
            sleep 10
            docker compose ps
            docker compose logs --tail=20

            # 헬스체크
            echo "🏥 서비스 헬스체크..."
            curl -f http://localhost/ping || echo "Nginx 헬스체크 실패"
            
            echo "🎉 배포 완료!" 
