name: Unified CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKERHUB_ADMIN: ${{ secrets.DOCKERHUB_ADMIN }}
  DOCKERHUB_SHOP: ${{ secrets.DOCKERHUB_SHOP }}
  DOCKERHUB_NGINX: ${{ secrets.DOCKERHUB_NGINX }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  SSH_KEY: ${{ secrets.SSH_KEY }}

jobs:
  # 변경사항 감지
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      shop_changed: ${{ steps.filter.outputs.shop }}
      admin_changed: ${{ steps.filter.outputs.admin }}
      nginx_changed: ${{ steps.filter.outputs.nginx }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shop:
              - 'apps/shop/**'
              - 'packages/shared/**'
            admin:
              - 'apps/admin/**'
              - 'packages/shared/**'
            nginx:
              - 'nginx/**'
              - 'docker-compose*.yml'

  # Shop 앱 빌드
  build-shop:
    needs: detect-changes
    if: needs.detect-changes.outputs.shop_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for build
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> apps/shop/.env
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> apps/shop/.env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.SHOP_API_URL }}" >> apps/shop/.env
          echo "NEXT_PUBLIC_TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}" >> apps/shop/.env
          echo "TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}" >> apps/shop/.env

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Shop image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/shop/Dockerfile
          push: true
          platform: linux/amd64
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKERHUB_SHOP }}:latest

  # Admin 앱 빌드
  build-admin:
    needs: detect-changes
    if: needs.detect-changes.outputs.admin_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for build
        run: |
          echo "VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> apps/admin/.env
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> apps/admin/.env
          echo "VITE_API_URL=${{ secrets.API_URL }}" >> apps/admin/.env

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Admin image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/admin/Dockerfile
          push: true
          platform: linux/amd64
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKERHUB_ADMIN }}:latest

  # Nginx 빌드
  build-nginx:
    needs: detect-changes
    if: needs.detect-changes.outputs.nginx_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          platform: linux/amd64
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKERHUB_NGINX }}:latest

  # 통합 배포
  deploy:
    needs: [detect-changes, build-shop, build-admin, build-nginx]
    if: always() && !failure() && (needs.build-shop.result == 'success' || needs.build-admin.result == 'success' || needs.build-nginx.result == 'success' || needs.build-shop.result == 'skipped' || needs.build-admin.result == 'skipped' || needs.build-nginx.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Infrastructure
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            # 프로젝트 디렉토리로 이동
            cd /home/ubuntu/findyourkicks-workspace
            
            # 최신 코드 pull
            git pull origin main
            
            # 환경변수 설정
            export DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
            export DOCKERHUB_ADMIN=${{ env.DOCKERHUB_ADMIN }}
            export DOCKERHUB_SHOP=${{ env.DOCKERHUB_SHOP }}
            export DOCKERHUB_NGINX=${{ env.DOCKERHUB_NGINX }}
            
            # 최신 이미지들 pull
            docker compose -f docker-compose.prod.yml pull
            
            # 서비스 재시작 (무중단 배포)
            docker compose -f docker-compose.prod.yml up -d
            
            # 헬스체크
            echo "Waiting for services to start..."
            sleep 30
            
            # 각 서비스 헬스체크
            curl -f https://findyourkicks.shop/ping || exit 1
            curl -f https://findyourkicks-admin.site/ping || exit 1
            
            echo "Deployment completed successfully!" 